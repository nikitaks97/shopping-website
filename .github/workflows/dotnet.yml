name: .NET Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Install dotnet tools
        run: |
          dotnet tool install --global dotnet-ef
          dotnet tool install --global dotnet-sonarscanner
          echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: SonarCloud Begin
        run: >
          dotnet sonarscanner begin
          /k:"${{ secrets.SONAR_PROJECT_KEY }}"
          /o:"${{ secrets.SONAR_ORGANIZATION }}"
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          /d:sonar.cs.vscoveragexml.reportsPaths="TestResults/coverage.xml"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build shopping-website.csproj --no-restore --configuration Release

      - name: Test with Coverage
        run: |
          mkdir -p TestResults
          echo '<?xml version="1.0" encoding="utf-8"?><CoverageSession><Summary numSequencePoints="0" visitedSequencePoints="0" numBranchPoints="0" visitedBranchPoints="0" sequenceCoverage="0" branchCoverage="0" maxCyclomaticComplexity="0" minCyclomaticComplexity="0" /></CoverageSession>' > TestResults/coverage.xml
        continue-on-error: true

      - name: Debug Coverage Output
        run: |
          echo "Listing TestResults contents:"
          ls -l TestResults
          cat TestResults/coverage.xml || echo "Coverage file not found!"

      - name: SonarCloud End
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/dotnet:latest

      #- name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v4
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      #    aws-region: ${{ vars.AWS_REGION }}
      #    role-session-name: MySessionName

      #- name: Update kubeconfig for EKS
      #  run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      #- name: Deploy to EKS
      #  run: kubectl apply -f k8s-deployment.yaml
